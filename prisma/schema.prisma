//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("SERVER_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

/// @@allow('all', auth().id == user.id)
model Account {
  id                       String  @id() @default(uuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

/// @@auth
/// @@allow('all', auth().id == this.id)
/// @@allow('all', auth().roles?[name == 'admin'])
/// @@allow('create', true)
model User {
  id                     String                  @id() @default(uuid())
  name                   String?
  email                  String?                 @unique()
  pictureUrl             String?
  stripeCustomerId       String?
  /// @password
  /// @omit
  password               String?
  dateCreated            DateTime                @default(now())
  dateUpdated            DateTime                @default(now()) @updatedAt()
  accounts               Account[]
  sessions               Session[]
  roles                  Role[]
  articlesAsAuthor       Article[]               @relation("author")
  aiReadinessAssessments AiReadinessAssessment[] @relation("user")
  messagesAsSender       Message[]               @relation("sender")
  messagesAsReceiver     Message[]               @relation("receiver")
}

/// @@allow('all', auth().id == user.id)
model Session {
  id           String   @id() @default(uuid())
  sessionToken String   @unique()
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// @@allow('read', auth().id == this.userId)
/// @@allow('delete', auth().id == this.userId)
/// @@allow('create', name != 'admin')
/// @@allow('update', future().name != 'admin')
model Role {
  id     String @id() @default(uuid())
  name   String
  userId String
  user   User   @relation(fields: [userId], references: [id])
}

/// @@allow('all', true)
model Article {
  id          String   @id() @default(uuid())
  title       String
  content     String
  authorId    String?
  author      User?    @relation(fields: [authorId], references: [id], name: "author")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model AiReadinessAssessment {
  id          String   @id() @default(uuid())
  responses   String
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], name: "user")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Message {
  id          String   @id() @default(uuid())
  content     String
  timestamp   String
  senderId    String?
  sender      User?    @relation(fields: [senderId], references: [id], name: "sender")
  receiverId  String?
  receiver    User?    @relation(fields: [receiverId], references: [id], name: "receiver")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model RagVector {
  id        String   @id() @default(uuid())
  key       String
  url       String
  tags      String[] @default([])
  /// @omit
  vectors   Bytes?
  /// @omit
  documents Bytes?
}

/// @@allow('all', true)
model Membership {
  id          String   @id() @default(uuid())
  name        String
  description String?
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Service {
  id          String   @id() @default(uuid())
  name        String
  description String?
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}
